# username/password pair which will be required to access the bug report
# listings at `/api/listing`, via HTTP basic auth.  If omitted, there will be
# *no* authentication on this access!

# the external URL at which /api is accessible; it is used to add a link to the
# report to the GitHub issue. If unspecified, based on the listen address.
# api_prefix: https://riot.im/bugreports

# List of approved AppNames we accept. Names not in the list or missing an application name will be rejected.
# An empty or missing list will retain legacy behaviour and permit reports from any application name.
allowed_app_names: []

# If any submission matches one of these rejection conditions, the submission is rejected.
# A condition is made by an union of optional fields: app, version, labels, user text. They all need to match for rejecting the rageshake
# It can also contain an optional reason to explain why this server is rejecting a user's submission.
# An errorcode can be provided to give a precise machine-readable error description. Otherwise, this defaults to RS_REJECTED.
rejection_conditions:
  - app: my-app
    version: "0.4.9" # if the submission has a Version which is exactly this value, reject the submission.
  - app: my-app
    label: "0.4.9" # if any label matches this value, the submission is rejected.
  - app: my-app
    version: "0.4.9"
    label: "nightly" # both label and Version must match for this condition to be true
    reason: "this server does not accept rageshakes from nightlies"
    errorcode: "RS_BAD_VERSION"
  - usertext: "(\\w{4}\\s){11}\\w{4}" # reject text containing possible recovery keys
    reason: "it matches a recovery key and recovery keys are private"
    errorcode: "RS_UNEXPECTED_RECOVERY_KEY"

# a GitHub personal access token (https://github.com/settings/tokens), which
# will be used to create a GitHub issue for each report. It requires
# `public_repo` scope. If omitted, no issues will be created.
github_token: secrettoken

# mappings from app name (as submitted in the API) to github repo for issue reporting.
github_project_mappings:
   my-app: octocat/HelloWorld

# a GitLab personal access token (https://gitlab.com/-/profile/personal_access_tokens), which
# will be used to create a GitLab issue for each report. It requires
# `api` scope. If omitted, no issues will be created.
gitlab_token: secrettoken
# the base URL of the GitLab instance to use
gitlab_url: https://gitlab.com

# mappings from app name (as submitted in the API) to the GitLab Project ID (not name!) for issue reporting.
gitlab_project_mappings:
  my-app: 12345
# mappings from app name to a list of GitLab label names for issue reporting.
gitlab_project_labels:
  my-app:
    - client::my-app
# whether GitLab issues should be created as confidential issues. Defaults to false.
gitlab_issue_confidential: true

# a Slack personal webhook URL (https://api.slack.com/incoming-webhooks), which
# will be used to post a notification on Slack for each report.
slack_webhook_url: https://hooks.slack.com/services/TTTTTTT/XXXXXXXXXX/YYYYYYYYYYY

# notification can also be pushed by email.
# this param controls the target emails
email_addresses:
  - support@matrix.org

# this is the from field that will be used in the email notifications
email_from: Rageshake <rageshake@matrix.org>

# SMTP server configuration
smtp_server: localhost:25
smtp_username: myemailuser
smtp_password: myemailpass

# a list of webhook URLs, (see docs/generic_webhook.md)
generic_webhook_urls: 
  - https://server.example.com/your-server/api
  - http://another-server.com/api

# The paths of template files for the body of Github and Gitlab issues, and emails.
# See `templates/README.md` for more information.
issue_body_template_file: path/to/issue_body.tmpl
email_body_template_file: path/to/email_body.tmpl
